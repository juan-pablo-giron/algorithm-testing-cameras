
%% =====================================================================%%
% It function execute several script written in python which allow
% simulate a netlist using the Spectre simulador, it script return in the 
% same PATH of the netlist the file that correspond to signals sorted
% by the Clumnas ASCII format, that could be read by Matlab. The user can 
% specifiy the signals that want to plot, upon 2 signals at same time.
% The algortihm also create one folder with the name specified by the user
% so, the result can be found in that folder. The results is both in .png 
% as .fig format to an easy reading.
%% =====================================================================%%


function [] = plot_output_spectre_UNIX(name_simulation,nameNetlist_spectre)


%% ==== Here are the desired signals that the user want see ============%%

% Dont include the numbers 
lst_name_signals = 'V_pd,I_pd,Vout_sf,Voff,Von,C_OFF_REQ,C_ON_REQ,C_OFF_ACK,C_ON_ACK,Vrst';
vec_signals = regexp(lst_name_signals,',','split');
len_vector_signals = length(vec_signals);
desired_signal2plot = 'C_ON_REQ';
index_desiredSignal2Plot =  f_findIndexInCell(desired_signal2plot,vec_signals,len_vector_signals);
X_length = 1;
Y_length = 1;
number_pixel = X_length*Y_length;


%%  ==== Here are created the folders to the simulation    =============%%


PATH_scriptMatlab = pwd;
PATH_scriptMatlab = strcat(PATH_scriptMatlab,'/')
cd('..')
PATH_script = strcat(pwd,'/')
PATH_scriptPython = strcat(pwd,'/','python/')

% Here are created the others folders
cd('..')

% folder netlist spectre
namefolder_netlistSpectre = 'Netlist_Spectre';
mkdir(namefolder_netlistSpectre)
PATH_netlist_spectre = strcat(pwd,'/',namefolder_netlistSpectre,'/')

% folder simulation
namefolder_simulation = 'Simulation_cameras';
mkdir(namefolder_simulation)
pwd
PATH_simulation = strcat(pwd,'/',namefolder_simulation,'/')


%name_simulation = input('Write the name of the simulation' );
nameinput = strcat('input_',name_simulation);

%enter to folder simulation and create a folder with the same name of the simulation.
cd(PATH_simulation)
pwd
[s,mess1,mess2]=mkdir(name_simulation);

%% Only terminal
if (~strcmp(mess1,''))

    fprintf('deleting the folder %s \n',name_simulation)		
	rmdir(name_simulation,'s')
	fprintf('Creating the folder %s \n',name_simulation)
    mkdir(name_simulation);
else
    
    fprintf('Folder %s created with succesful',name_simulation)
    
end

%% User defined
% while (~strcmp(mess1,''))
% 
% 		display(mess1)
% 		confirm = input('do you want overwrite it [y|n]?');
% 		while (~(strcmp(confirm,'y') || strcmp(confirm,'n')))
% 		
% 			confirm = input('type valid command ...do you want overwrite it [y|n]?');
% 		
% 		end
% 		if strcmp(confirm,'y')
% 		
% 			fprintf('deleting the folder %s \n',name_simulation)		
% 			rmdir(name_simulation,'s')
% 			fprintf('Creating the folder %s \n',name_simulation)
% 			[s,mess1,mess2]=mkdir(name_simulation);
% 		else
% 			name_simulation = input('Write other name for the simulation' );
% 			[s,mess1,mess2]=mkdir(name_simulation);
% 		end
% end

nameinput = strcat('input_',name_simulation)

%create the folders in folder simulation

PATH_folder_simulation=strcat(PATH_simulation,name_simulation,'/');
cd(PATH_folder_simulation)
name_folder_matlab_output = strcat('output_matlab_',name_simulation);
name_matlab_output = strcat('output_matlab_',name_simulation,'.csv');
name_images = strcat('images_',name_simulation);
name_folder_nohup = strcat('nohup_',name_simulation);
mkdir(nameinput)
mkdir(name_folder_matlab_output)
mkdir(name_images)
mkdir(name_folder_nohup)
PATH_sim_output_matlab = strcat(PATH_folder_simulation,name_folder_matlab_output,'/');
PATH_folder_input = strcat(PATH_folder_simulation,nameinput,'/');
PATH_folder_images = strcat(PATH_folder_simulation,name_images,'/');
PATH_folder_nohup = strcat(PATH_folder_simulation,name_folder_nohup,'/');

%% ==================== generates the signals ========================= %%

eventsPerPeriod = 100000;
I_ph_max = 100e-12;
I_ph_min = 1e-12;
period_Signal = 1e-3;
Nperiods = 4;
finalTime = Nperiods*period_Signal;
delta_t = period_Signal/eventsPerPeriod;
cd(PATH_scriptMatlab)

%% Only ON events
%signal_ramp_illuminance_ON_events(PATH_folder_input,PATH_folder_images, ...
%    number_pixel,nameinput,eventsPerPeriod,period_Signal,delta_t,I_ph_max,I_ph_min)
%cd(PATH_scriptMatlab)

%% OFF Events



%% Triangule (ON/OFF) Events
signal_triangule(PATH_folder_input,PATH_folder_images, ...
    number_pixel,nameinput,eventsPerPeriod,period_Signal,delta_t,I_ph_max,I_ph_min)

cd(PATH_scriptMatlab)

%% ==================== CALCULATE THE EXPECTED BEHAVIOUR  ============= %%

% DVS_PIXEL

DVS_model_fn(PATH_folder_input,PATH_sim_output_matlab,Name_simulation,name_simulation)


%% ===================== CALL TO SCRIPTS  ==============================%%

%nameNetlist_spectre = input ...
%    ('Write the name of the netlist generated by Spectre with extension .scs ');
nameNetlist_output = strcat('netlist_',name_simulation);
ext_input = '.csv';


%% Here is changed the netlist by intuitives names 
cd(PATH_scriptPython)

% command = ['nohup' ' ' 'python' ' ' 'setting_input_netlist_UNIX.py' ' ' ...
%     PATH_netlist_spectre ' ' PATH_folder_simulation ' ' PATH_folder_input ...
%     ' ' nameNetlist_spectre ' ' nameNetlist_output ' '...
%     nameinput ' ' ext_input ' ' int2str(number_pixel) ' ' ...
%     num2str(period_Signal) ' ' num2str(finalTime) ' ' num2str(delta_t) ...
%     ' ' lst_name_signals ' ' '3>' ' ' ...
%     strcat(PATH_folder_nohup,'error_change_netlist.out') ' ' ...
%     '>' ' ' strcat(PATH_folder_nohup,'status_change_netlist.out') ' ' '&'];

command = ['python' ' ' 'setting_input_netlist_UNIX.py' ' ' ...
   PATH_netlist_spectre ' ' PATH_folder_simulation ' ' PATH_folder_input ...
   ' ' nameNetlist_spectre ' ' nameNetlist_output ' '...
   nameinput ' ' ext_input ' ' int2str(number_pixel) ' ' ...
   num2str(period_Signal) ' ' num2str(finalTime) ' ' num2str(delta_t) ...
   ' ' lst_name_signals];


system(command)

%% here is executed the spectre simulator

cd(PATH_scriptPython)
% command = ['nohup' ' ' 'python' ' ' 'executing_spectre_command_UNIX.py' ...
%     ' ' PATH_folder_simulation ' ' nameNetlist_output ' ' ...
%     PATH_sim_output_matlab ' ' name_matlab_output ' ' '2>' ' ' ...
%     strcat(PATH_folder_nohup,'error_spectre_exec.out') ' ' ...
%     '>' ' ' strcat(PATH_folder_nohup,'status_spectre_exec.out') ' ' '&'];

command = ['python' ' ' 'executing_spectre_command_UNIX.py' ...
    ' ' PATH_folder_simulation ' ' nameNetlist_output ' ' ...
    PATH_sim_output_matlab ' ' name_matlab_output];

system(command)

cd(PATH_scriptMatlab)

command = ['mv' ' ' 'output_matlab.out' ' ' PATH_folder_nohup]
system(command)

exit


%% Here is plotted the signals

%signals_simulation = importdata(name_output_simulation);
%signals = signals_simulation(1,:)

%time = signals_simulation(:,1);
%C_ON_ACK = output_spectre(:,10);
%V_pd = output_spectre(:,3);
%I_pd = output_spectre(:,2);
%figure
%[ax,h1,h2] = plotyy(time,I_pd,time,C_ON_ACK,'plot','plot');


