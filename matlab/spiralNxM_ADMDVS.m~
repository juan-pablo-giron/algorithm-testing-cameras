%function []=spiralNxM(N,M,freq)

%         <------- N ------>
%         ^ Pix0 Pix1 .....
%         |   .
%         |     .
%         M       .
%         |         .
%         |           .PixN,M

tic;

clear all;clc;close all;

N = 2; 
M = 2;
freq = 10;
rpm = freq*60;

curr_path = pwd;
PATH_input = '/home/netware/users/jpgironruiz/Desktop/Documents/Cadence_analysis/Inputs/';
%PATH_input = '/sdcard/documents/MSc/Cadence_analysis/Inputs/';
cd(PATH_input);
nameSignal = strcat('ADM_spiral',int2str(N),'X',int2str(M),'_',int2str(freq));
name_folder = strcat(nameSignal,'/');
[s,mess1,mess2]=mkdir(name_folder);
if (~strcmp(mess1,''))
   
    rmdir(name_folder,'s');
    mkdir(name_folder);
end
PATH_input = strcat(PATH_input,nameSignal,'/');
cd(curr_path);
pixel = 0;
start_col = 1;end_Col = N;
start_row = 2;end_row = M;


I0 = 50e-12;
Ich = 100e-12;
scaleTime = 1e3;


quant_pixel = N*M;
Array = I0*ones(M,N);
i = 1;j=1;

% ---- Definitions ----- %

% Vector time (N*M) x 6

vec_time = zeros(N*M,6);
vec_pos_pixels = zeros(N*M,1);
vec_I_pd = zeros(size(vec_time))+I0; % Senhal

%1      2  3        4  5         6
%           ---------
%         /          \
%________/            \__________
%        <---- PW ---->

% Initials condition for each time. (pixel 0).
PW = 1/freq;

t1 = 0;
t2 = 0.1*PW;
t3 = 0.3*PW+t2;
t4 = t3 + 0.4*PW;
t5 = t4 + 0.3*PW;
t6 = 0.1*PW + N*M*PW;

%time
vec_time(1,1) = t1;
vec_time(1,2) = t2;
vec_time(1,3) = t3;
vec_time(1,4) = t4;
vec_time(1,5) = t5;
vec_time(1,6) = t6;
% signal

vec_I_pd(1,3) = Ich;
vec_I_pd(1,4) = Ich;

t_delay = 0.5; % Este tiempo sirve para estabilizar el circuito dentro de medio segundo.


% Construir el vector de orden de pixel vec_pos_pixel.

state = 0;
i = 1;j=1;
pixel = 0;
while (pixel < quant_pixel)
   

   switch state
       
       case 0
           
            % the gradient go to rigth
            if ( j < end_Col)
                                
                % --- Calculate Numbre pixel ---%
                vec_pos_pixels(pixel+1) = i*j + (i-1)*(N-j);
                j = j + 1;
                pixel = pixel + 1;
            else
                end_Col = end_Col - 1;
                state = 1;
                export = false;
            end
            
       case 1
       
            % The gradient is downing by one column
            if ( i < end_row )
                              
                % --- Calculate Numbre pixel ---%
                vec_pos_pixels(pixel+1) = i*j + (i-1)*(N-j);
                i = i + 1;
                pixel = pixel + 1;
                export = true;
            else
                end_row = end_row - 1;
                state = 2;
            end
       case 2
           
            % el gradiente esta yendo de derecha a izquierda
            if ( j > start_col)
                               
                % --- Calculate Numbre pixel ---%
                vec_pos_pixels(pixel+1) = i*j + (i-1)*(N-j);
                j = j - 1;
                pixel = pixel + 1;
            else
                start_col = start_col + 1;
                state = 3;
            end
       case 3
           
           % El gradiente esta subiendo por una columna
           if ( i >= start_row) 
                            
               % --- Calculate Numbre pixel ---%
               vec_pos_pixels(pixel+1) = i*j + (i-1)*(N-j);
               i = i - 1;
               pixel = pixel + 1;
           else
               i = i + 1;
               j = j + 1;
               start_row = start_row + 1;
               if pixel+1 == quant_pixel
                   
                   state = 4;
               else
                   state = 0;
               end
               
           end
       case 4
           % Left one pixel only!
           pixel = pixel + 1;
                   
           % --- Calculate Numbre pixel ---%
           vec_pos_pixels(pixel+1) = i*j + (i-1)*(N-j);
   end
        
end


% Construir el vector de tiempo y la senal. 

for i=1:length(vec_pos_pixels)-1
    
    pix = vec_pos_pixels(i);       % previous pixel
    pix_next = vec_pos_pixels(i+1);% next pixel.
    
    t1 = 0; % The first point is equal in whole pixels.
    t2 = vec_time(pix,5);  
    t3 = 0.3*PW+t2;
    t4 = t3 + 0.4*PW;
    t5 = t4 + 0.3*PW;
    t6 = 0.1*PW + N*M*PW;
    % Time
    vec_time(pix_next,1) = t1;
    vec_time(pix_next,2) = t2;
    vec_time(pix_next,3) = t3;
    vec_time(pix_next,4) = t4;
    vec_time(pix_next,5) = t5;
    vec_time(pix_next,6) = t6;
    % Photo-current
    vec_I_pd(pix_next,3) = Ich;
    vec_I_pd(pix_next,4) = Ich;
    
end

% Hacer la grafica en 3d.
% Only for the plot

X = 0:2*N-1;
Y = 0:2*M-1;
z  = zeros(2*M,2*N);
h = figure(1);

% y -> Columns
% x -> Rows



for i=1:M
    
    z(:,:) = NaN;
    
    for j=1:N
        
        pixel = i*j + (i-1)*(N-j);
        time = vec_time(pixel,3); 
        
        % --- plot ---%
        y1  = i;
        y2  = y1+1;
        x1  = j;
        x2  = x1+1;
        z([y1 y2],[x1 x2]) = scaleTime*time;
        surf(X,Y,z)
        hold on
        grid on
        z(:,:) = NaN;
        
    end
    
end

% Interpolate the data and save into file.
cd(PATH_input)
Npoints = 1000;
new_vec_time = linspace(t1,t6,Npoints);

for i=1:quant_pixel
    
    name_file = strcat(nameSignal,'_',int2str(i-1),'.csv');
	I_pd_interp = interp1(vec_time(i,:),vec_I_pd(i,:),new_vec_time,'linear');
    dlmwrite(name_file,[new_vec_time' I_pd_interp'],'delimiter',' ','precision',5,'newline','unix');
    
    
end

cd(PATH_input)
period = t6;
fid = fopen('README.txt','wt');
fprintf(fid,' N %d\n M %d\n T %d \n freq %d (Hz) \n Sample %d \n RPM %d \n Tdelay %d \n',N,M,period,1/period,samples,rpm,t_delay);
fclose(fid);


colorbar;
set(gca,'xtick',X);
set(gca,'ytick',Y);
set(gca,'Ydir','reverse')
xlabel('COLUMNS')
ylabel('ROWS')
zlabel('Time ms')
name_title = 'Spiral';
title(name_title)
xlim([0 N])
ylim([0 M])
saveas(h,strcat(nameSignal,'.fig'),'fig')
saveas(h,strcat(nameSignal,'.png'),'png')
cd(curr_path)
toc;
