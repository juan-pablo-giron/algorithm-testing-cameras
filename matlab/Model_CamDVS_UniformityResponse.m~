%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%  Aqui esta el modelo de una camara DVS
%
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



%% ========================= PARAMAMETERS MOSFET  ================= %%

close all;clc;clear;

tic;
matlabpool open 8;

PATH_input = getenv('PATH_folder_input'); %'/home/netware/users/jpgironruiz/Desktop/Documents/Cadence_analysis/Inputs/TrianguleWave7X8_250/';
PATH_folder_images = getenv('PATH_folder_images'); % '/home/netware/users/jpgironruiz/Desktop/Documents/Cadence_analysis/Inputs/TrianguleWave7X8_250/';
name_signal = getenv('name_Signalsinput'); %'TrianguleWave7X8_250';
N = str2num(getenv('N')); %7;
M = str2num(getenv('M')); %8;
V_p = 1.65;%str2num(getenv('Vdon'));
V_n = 1.35;%str2num(getenv('Vdoff'));
T_Rst = 200e-6;

pwd_current=pwd;

%% Transistor's parameters
nn = 1.334;
np = 1.369;
Vtn = 359.2e-3;
Vtp = 387e-3;
Kn = 227.1e-6;
Kp = 48.1e-6;
fi = 25.8e-3;
Ratio = 0.5e-6/2e-6;
Isn = 2*nn*fi^2*Kn*Ratio;

% Known vaiables
Vref = 1.5;
Vos = 5.42e-3;      % Voffset comparador
Iph_max = 1e-9;
Iph_min = 20e-12;
A = 20;             % Gain closed loop differentiator

% Senal de entrada

name_input = strcat(PATH_input,name_signal,'_0.csv');
input_signal = importdata(name_input);
t = input_signal(:,1);
len_t = length(t);
Iph = input_signal(:,2);
log_Iph = log(Iph/Isn);


% Lims de variacion
xmax = 20e-3;
xmin = -50e-3;

% Creando el vector Edges
Max_Edges = 50; 
Events_ON = zeros(Max_Edges,N*M);
Events_OFF = zeros(Max_Edges,N*M);
%

quant_pixel = N*M;
Vdiff=zeros(len_t,quant_pixel);
Vdiff_ind = zeros(len_t,1);
% structure ON 
ON_events = {[]}; ON_events2TC = zeros(1,2);
% structure OFF event
OFF_events = {[]}; OFF_events2TC = zeros(1,2);

ind_ON = 1;
ind_OFF = 1;


for numEdge=1:Max_Edges

    parfor i=0:quant_pixel-1;

        % paso 1. Encontrar Vdiff para cada uno de los pixeles
        name_input = strcat(PATH_input,name_signal,'_',num2str(i),'.csv');
        input_signal = importdata(name_input);
        Iph = input_signal(:,2);
        log_Iph = log(Iph/Isn);
        Vdiff_ind = -nn*fi*A*log_Iph;
        Vdiff_max = max(Vdiff_ind);    %used to normalized
        Vdiff_ind = Vdiff_ind - Vdiff_max; %used to normalized

        % Paso 2. Encontrar los eventos ON y OFF.
        
        x = normrnd(0,xmax,1,1); % Variacion de Voffset de la chave
        Events_ON_tmp = zeros(Max_Edges,1);
        Events_OFF_tmp = zeros(Max_Edges,1);
        for j=1:len_t
           value = Vdiff_ind(j);
           VdiffON = V_p - (Vref+x) + Vos;  
           
           
           if (value <= VdiffON)
               % Hubo evento ON
               
               Vdiff_ind(j:len_t) = Vdiff_ind(j:len_t) + abs(value); %reset to Vref
               
               Events_ON_tmp(numEdge) = Events_ON_tmp(numEdge) + 1; 
               
               x = normrnd(0,xmax,1,1);
               %%

           else
               VdiffOFF= V_n - (Vref+x) + Vos;
               if ( value >= VdiffOFF)
                   % Hubo evento off
                   Vdiff_ind(j:len_t) = Vdiff_ind(j:len_t) - abs(value); %reset to Vref
                   
                   Events_OFF_tmp(numEdge) = Events_OFF_tmp(numEdge) + 1; 
                   
                   x = normrnd(0,xmax,1,1);
                   
               else
                   continue
               end
           end

        end
        Vdiff(:,i+1) = Vdiff_ind;
                
        % Construir un vector para crear el histograma, eliminando el numero 0
                    
        Events_ON(:,i+1) = Events_ON_tmp;
        Events_OFF(:,i+1) = Events_ON_tmp;
        
    end
    
end

matlabpool close

% Calcular la media de cada pixel dividiendo la suma por la cantidad de
% edges


% Sacar el histograma con las medias de los pixeles


cd(pwd_current)

toc
%exit
